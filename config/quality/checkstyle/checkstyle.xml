<?xml version="1.0"?>
<!--
  ~ Copyright 2015 Vincent Brison.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">
<!-- 对于所有的模块来说,如果有这个模块则说明检测这一项,没有则不检测这一项 -->
<!-- 所有的模块中,其ROOT必须为Checker -->
<module name="Checker">
    <!--限定文件编码为UTF-8-->
    <property name="charset" value="UTF-8"/>

    <!--检查级别，不在此处配置，改为gradle脚本配置-->
    <!--<property name="severity" value="warning"/> -->

    <!--配置例外规则文件-不进行检查-->
    <module name="SuppressionFilter">
        <property name="file" value="${checkstyleSuppressionsPath}"/>
    </module>

    <!--
         重复代码的检查，超过100行就认为重复，UTF-8格式 本检查一定要放在"TreeWalker"节点前，否则在
         Checkclipse中会无法使用。
     -->
    <module name="StrictDuplicateCode">
        <property name="min" value="100" />
    </module>

    <!-- 检查文件的长度 default max=2000 -->
    <module name="FileLength">
        <property name="max" value="2000"/>
        <property name="fileExtensions" value=""/>
    </module>

    <!-- 文件方面的检查 !-->
    <module name="TreeWalker">
        <!-- 检验每个文件末尾是否有一个空行-->
        <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
        <!--
        <module name="NewlineAtEndOfFile"/>
        -->

        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <!-- Checks for long lines. !-->
        <!-- 每行不超过180个字-->
        <module name="LineLength">
            <property name="ignorePattern" value="^$"/>
            <property name="max" value="180"/>
        </module>

        <!-- 检查只有必须有{},确省为必须,主要在if,else时有这样的情况 -->
        <module name="NeedBraces"/>
        <!-- 检查"}",缺省在同一行 -->
        <!--<module name="RightCurly"/>-->

        <!-- Checks the number of methods declared in each type. This includes the number of each scope !-->
        <!-- (private, package, protected and public) as well as an overall total. !-->
        <!-- See http://checkstyle.sourceforge.net/config_sizes.html#MethodCount !-->
        <!-- 限制方法的个数-->
        <!--<module name="MethodCount">-->
        <!--<property name="maxTotal" value="100"/>-->
        <!--<property name="maxPrivate" value="100"/>-->
        <!--<property name="maxPackage" value="100"/>-->
        <!--<property name="maxProtected" value="100"/>-->
        <!--<property name="maxPublic" value="100"/>-->
        <!--</module>-->

        <!-- Checks for long methods and constructors. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <!-- max 默认为 100，设置长度100 -->
        <module name="MethodLength">
            <property name="max" value="100"/>
            <!-- 统计时是否包括空行和以//开始的注释,缺省为统计(true)-->
            <property name="countEmpty" value="true"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
        </module>

        <!-- Checks for the number of types declared at the outer (or root) level in a file. !-->
        <!-- See http://checkstyle.sourceforge.net/config_sizes.html#OuterTypeNumber !-->
        <!--限制单个java文件最大class个数(内部类除外)-->
        <module name="OuterTypeNumber">
            <property name="max" value="1"/>
        </module>

        <!-- Checks the number of parameters of a method or constructor. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <!-- 方法的参数个数不超过10个 -->
        <module name="ParameterNumber">
            <property name="max" value="10"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
        </module>

    </module>

    <!-- 编码方面的检查 !-->
    <module name="TreeWalker">
        <!-- Checks the padding of an empty for initializer. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!--限制for循环init块是否有空格-->
        <module name="EmptyForInitializerPad">
            <property name="option" value="nospace"/>
        </module>

        <!-- Checks the padding of an empty for iterator. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!-- 检查for iterator语句是否使用空格
             option: 定义初始化语句是否使用空格，例如：space表示使用空格，则for(Iterator iterator = List.iterator(); iterator.hasNext(); iterator.next())就是形式合理的，否则就是形式不合理的-->
        <!--<module name="EmptyForIteratorPad">-->
        <!--<property name="option" value="nospace"/>-->
        <!--</module>-->

        <!-- Checks that the whitespace around the Generic tokens < and > is correct to the typical convention. !-->
        <!-- See http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace !-->
        <!--<module name="GenericWhitespace"/>-->

        <!-- Checks the padding between the identifier of a method definition, !-->
        <!-- constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!-- 检查方法参数的格式
          allowLineBreaks: 参数是否允许在不同行
          option: 在参数和括号、参数和标识符之间是否包含空格-->
        <module name="MethodParamPad">
            <!-- 允许参数在不同行-->
            <property name="allowLineBreaks" value="true"/>
            <!-- 允许方法名后紧跟左边圆括号"(" -->
            <property name="option" value="nospace"/>
            <property name="tokens"
                value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL "/>
        </module>

        <!-- Checks that there is no whitespace after a token. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!--<module name="NoWhitespaceAfter">-->
        <!--<property name="allowLineBreaks" value="true"/>-->
        <!--<property name="tokens"-->
        <!--value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>-->
        <!--</module>-->

        <!-- Checks that there is no whitespace before a token. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!--<module name="NoWhitespaceBefore">-->
        <!--<property name="allowLineBreaks" value="false"/>-->
        <!--<property name="tokens" value="SEMI, POST_DEC, POST_INC"/>-->
        <!--</module>-->

        <!-- Checks the policy on how to wrap lines on operators. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!-- 检查运算符是否在应在同一行
                   option: 定义运算符的位置，eol在同一行，nl在下一行
                   tokens: 定义检查的类型-->
        <!--<module name="OperatorWrap">-->
        <!--<property name="option" value="nl"/>-->
        <!--<property name="tokens" value="ASSIGN, BAND, BOR, BSR, BXOR, COLON, DIV,-->
        <!--EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF,-->
        <!--LOR, LT, MINUS, MOD, NOT_EQUAL,-->
        <!--PLUS, QUESTION, SL, SR, STAR"/>-->
        <!--</module>-->

        <!-- Checks the policy on the padding of parentheses. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!-- 检查左小括号'('后边和右小括号')'前边是否有空格
                   option: space表示有空格，nospace表示没有空格
                   tokens: 定义检查的类型-->
        <!--<module name="ParenPad">-->
        <!--<property name="option" value="nospace"/>-->
        <!--<property name="tokens"-->
        <!--value="CTOR_CALL, LPAREN, METHOD_CALL, RPAREN, SUPER_CTOR_CALL"/>-->
        <!--</module>-->

        <!-- Checks the policy on the padding of parentheses for typecasts. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
        <!--<module name="TypecastParenPad">-->
        <!--<property name="option" value="nospace"/>-->
        <!--<property name="tokens" value="TYPECAST, RPAREN"/>-->
        <!--</module>-->

        <!-- Checks that a token is followed by whitespace. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!-- 检查类型后是否包含空格 Checks that a token is followed by whitespace.
                           tokens: 检查的类型 -->
        <!--<module name="WhitespaceAfter">-->
        <!--<property name="tokens" value="COMMA, SEMI, TYPECAST"/>-->
        <!--</module>-->

        <!-- Checks that a token is surrounded by whitespace. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <!-- 检查前后是否有空格，比如if的前面或者}的后面 !-->
        <!--<module name="WhitespaceAround">-->
        <!--<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN,-->
        <!--BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND,-->
        <!--LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,-->
        <!--LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,-->
        <!--LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT,-->
        <!--MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN,-->
        <!--QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN"/>-->
        <!--<property name="allowEmptyConstructors" value="false"/>-->
        <!--<property name="allowEmptyMethods" value="false"/>-->
        <!--</module>-->

        <!-- The following checks are actually not whitespace checks, but still fit here quite well. !-->

        <!-- Checks that there is only one statement per line. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#OneStatementPerLine !-->
        <!-- 禁止一行有多句代码 !-->
        <module name="OneStatementPerLine"/>

        <!-- Checks that each variable declaration is in its own statement and on its own line. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 同一行不能有多个声明 -->
        <!--<module name="MultipleVariableDeclarations"/>-->

    </module>

    <!-- Checks that there are no tabs in the source file !-->
    <!-- http://checkstyle.sourceforge.net/config_whitespace.html#FileTabCharacter !-->
    <!-- 检查文件中是否含有'\t'-->
    <!-- 不允许使用"tab"键  -->
    <module name="FileTabCharacter"/>

    <!-- 命名方面的检查 -->
    <module name="TreeWalker">
        <!-- Checks that the outer type name and the file name match. !-->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename !-->
        <!-- 限制 第一个类名必需与java文件名相同 !-->
        <module name="OuterTypeFilename"/>

        <!-- Checks for class type parameter name naming conventions. !-->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html#ClassTypeParameterName !-->
        <!-- 验证类类型参数的命名规则-用大写字母开头 !-->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>

        <!-- Checks for constant name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 常量名的检查-全大写字母 -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <!-- Checks for local final variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 局部的final变量，包括catch中的参数的检查-小写字母开头 -->
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="VARIABLE_DEF, PARAMETER_DEF"/>
        </module>

        <!-- Checks for local variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 局部的非final型的变量，包括catch中的参数的检查-小写字母开头 -->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="VARIABLE_DEF, PARAMETER_DEF"/>
        </module>

        <!-- Checks for member variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 变量（非static型变量）的检查 -->
        <module name="MemberName">
            <!--命名规则-->
            <property name="format" value="[a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <!-- Checks for method name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 方法名的检查-小写字母开头 -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Checks for method type parameter name naming conventions. !-->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html#MethodTypeParameterName !-->
        <!-- 验证方法类型参数的命名规则-用大写字母开头-->
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>

        <!-- Checks for package name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 包名的检查-小写字母开头-->
        <module name="PackageName">
            <property name="format" value="^[a-z][a-z0-9]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>

        <!-- Checks for parameter name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 方法的参数名-小写字母开头 -->
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <!-- Checks for static variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 验证静态变量的命名规则-小写字母开头 -->
        <module name="StaticVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <!-- Checks for type name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- 命名方面的检查，它们都使用了Sun官方定的规则。 -->
        <!-- 类名(class 或interface) 的检查-大写字母开头 -->
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

    </module>

    <!-- ************************ Javadoc样式方面的检查 ********************-->
    <module name="TreeWalker">
        <!-- Validates Javadoc comments to help ensure they are well formed. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocStyle !-->
        <!-- 限制javadoc的样式-->
        <module name="JavadocStyle">
            <property name="scope" value="private"/>
            <!--
            <property name="excludeScope"        value=""/>
            !-->
            <!-- Comment的第一句的末尾是否要有一个句号,true必须有,default为true -->
            <property name="checkFirstSentence" value="false"/>
            <property name="endOfSentenceFormat" value="([.?!][ \t\n\r\f&lt;])|([.?!]$)"/>
            <property name="checkEmptyJavadoc" value="false"/>
            <!-- 检查错误的HTML脚本,比如不匹配,true检查,default为true -->
            <property name="checkHtml" value="true"/>
            <property name="tokens"
                value="INTERFACE_DEF, CLASS_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>

        <!-- Checks Javadoc comments for class and interface definitions. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocType !-->
        <!-- javadoc的检查 -->
        <!-- 检查所有的interface和class（限制类或接口需要javadoc） -->
        <module name="JavadocType">
            <property name="scope" value="package"/>
            <!--
            <property name="excludeScope"          value=""/>
            !-->
            <!--<property name="authorFormat"          value=""/>!-->
            <!--<property name="versionFormat"         value=""/>!-->
            <!-- 是否允许错误的参数声明,true为允许,缺省为不允许 -->
            <property name="allowMissingParamTags" value="false"/>
            <!--是否允许未知tag-不允许-->
            <property name="allowUnknownTags" value="false"/>
            <property name="tokens" value="INTERFACE_DEF, CLASS_DEF"/>
        </module>

        <!-- Checks to ensure that the javadoc tags exist (if required) !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocMethod !-->
        <!-- 检查所有方法的javadoc，可以不声明RuntimeException（限制方法上的javadoc） -->
        <module name="JavadocMethod">
            <property name="scope" value="package"/>
            <!--
            <property name="excludeScope"                 value=""/>
            !-->
            <property name="allowUndeclaredRTE" value="false"/>
            <property name="allowThrowsTagsForSubclasses" value="false"/>
            <property name="allowMissingParamTags" value="false"/>
            <!-- 是否允许错误的错误声明,true为允许,缺省为不允许 -->
            <property name="allowMissingThrowsTags" value="false"/>
            <!-- 是否允许错误的返回类型声明,true为允许,缺省为不允许 -->
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowMissingJavadoc" value="false"/>
            <!-- Whether to allow missing Javadoc on accessor methods for properties (setters and getters).
                The setter and getter methods must match exactly the structures below.
                public void setNumber(final int number)
                {
                    mNumber = number;
                }

                public int getNumber()
                {
                    return mNumber;
                }

                public boolean isSomething()
                {
                    return false;
                }
            -->
            <property name="allowMissingPropertyJavadoc" value="true"/>
            <!-- 检查是否抛出了多余的异常 !-->
            <property name="logLoadErrors" value="true"/>
            <property name="suppressLoadErrors" value="false"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
        </module>

        <!-- Checks that variables have Javadoc comments. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocVariable !-->
        <!-- 检查某个变量的javadoc -->
        <module name="JavadocVariable">
            <property name="scope" value="public"/>
            <!--
            <property name="excludeScope" value=""/>
            !-->
        </module>

    </module>

    <module name="TreeWalker">
        <!-- Ensure a class has a package declaration. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 限制类,接口等必须定义在包内（确保一个类或接口有package声明）-->
        <module name="PackageDeclaration">
            <property name="ignoreDirectoryName" value="true"/>
        </module>
    </module>

    <module name="TreeWalker">
        <!-- Checks visibility of class members.
         检查class成员属性可见性。只有static final 修饰的成员是可以public的。其他的成员属性必需是private的，除非属性protectedAllowed或者packageAllowed设置了true.
         !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <!--<module name="VisibilityModifier">-->
        <!--<property name="packageAllowed" value="false"/>-->
        <!--<property name="protectedAllowed" value="true"/>-->
        <!--<property name="publicMemberPattern" value="^serialVersionUID$"/>-->
        <!--</module>-->

        <!-- Checks that classes (except abtract one) define a ctor and don't rely on the default one. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!--<module name="MissingCtor"/>!-->

        <!-- Make sure that utility classes (classes that contain only static methods) do not have a public constructor.
             确保Utils类（只提供static方法和属性的类）没有public构造器。
        !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <!--<module name="HideUtilityClassConstructor"/>-->

    </module>

    <module name="TreeWalker">
        <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification, !-->
        <!-- sections 8.1.1, 8.3.1 and 8.4.3. !-->
        <!-- See http://checkstyle.sf.net/config_modifiers.html !-->
        <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native,strictfp-->
        <!--
            每个关键字都有正确的出现顺序。比如 public static final XXX 是对一个常量的声明。如果使用 static
            public final 就是错误的。
        -->
        <module name="ModifierOrder"/>

        <!-- Checks that there are no redundant modifiers. !-->
        <!-- See http://checkstyle.sf.net/config_modifiers.html !-->
        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰
                           tokens: 检查的类型 -->
        <!--
        <module name="RedundantModifier">
            <property name="tokens" value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF"/>
        </module>
         !-->

        <!-- Checks that a class which has only private constructors is declared as final.
             只有私有构造器的类必须声明为final（限制只有private构造的类必需定义为 final class）
        !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <module name="FinalClass"/>

        <!-- Check nested (internal) classes/interfaces are declared at the bottom of the class after all method and field declarations. !-->
        <!-- See http://checkstyle.sourceforge.net/config_design.html#InnerTypeLast !-->
        <!-- 限制静态成员内部类,成员内部类必需定义在类的最后 -->
        <!--<module name="InnerTypeLast"/>-->

        <!-- Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.
            不允许interface像java.ioSerializable一样只作为标记，不包含任何methods和constants。
            （检查接口是否只定义了变量而没有定义方法，因为接口应该用来描述一个类型，所以只定义变量而不定义方法是不恰当的）
        !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <module name="InterfaceIsType">
            <property name="allowMarkerInterfaces" value="true"/>
        </module>

        <!-- Restricts throws statements to a specified count. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <!-- 限制单个方法throws的种类数量（检查抛出异常的数量），最大2个-->
        <!--<module name="ThrowsCount">-->
        <!--<property name="max" value="2"/>-->
        <!--</module>-->

        <!-- Checks that classes that define a covariant equals() method also override method equals(java.lang.Object). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 限制 equals() 确实覆盖了object.equals(Object obj)-->
        <module name="CovariantEquals"/>

        <!-- Checks declaration order according to Code Conventions for the Java Programming Language. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 限制类的组成顺序：
            根据 Sun 编码规范， class 或 interface 中的顺序如下：
            1.class 声明。首先是 public,
            然后是protected , 然后是 package level （不包括access modifier ） 最后是private .
            (多个class放在一个java文件中的情况）
            2.变量声明。 首先是 public, 然后是protected，再然后是 package
            level （不包括access modifier ）， 最后是private . (多个class放在一个java文件中的情况）
            3.构造函数
            4.方法
        -->
        <!--<module name="DeclarationOrder">-->
        <!--<property name="ignoreConstructors" value="false"/>-->
        <!--<property name="ignoreMethods" value="false"/>-->
        <!--<property name="ignoreModifiers" value="false"/>-->
        <!--</module>-->

        <!-- Check that the default is after all the cases in a switch statement. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 限制switch语句块中,default的位置必需在最后 -->
        <module name="DefaultComesLast"/>

        <!-- Detects empty statements (standalone ;). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 编码方面的检查 -->
        <!-- 不许出现空语句 -->
        <module name="EmptyStatement"/>

        <!-- Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 禁止扩大范围的异常捕获（ 不能catch java.lang.RuntimeException，java.lang.Throwable）  -->
        <module name="IllegalCatch">
            <property name="illegalClassNames"
                value="java.lang.Throwable, java.lang.RuntimeException"/>
        </module>

        <!-- This check can be used to ensure that types are not declared to be thrown. !-->
        <!-- Declaring to throw java.lang.Error or java.lang.RuntimeException is almost never acceptable. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#IllegalThrows !-->
        <!-- 禁止不合理的异常抛出-->
        <module name="IllegalThrows">
            <property name="illegalClassNames"
                value="java.lang.Throwable, java.lang.Error, java.lang.RuntimeException"/>
        </module>

        <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 不许内部赋值（禁止子表达式中有赋值操作） -->
        <module name="InnerAssignment">
            <property name="tokens" value="ASSIGN, BAND_ASSIGN, BOR_ASSIGN, BSR_ASSIGN, BXOR_ASSIGN,
                                           DIV_ASSIGN, MINUS_ASSIGN, MOD_ASSIGN, PLUS_ASSIGN, SL_ASSIGN,
                                           SR_ASSIGN, STAR_ASSIGN"/>
        </module>

        <!-- 禁止魔法数，数值应该在常量中定义，这个视情况而定 -->
        <module name="MagicNumber" >
            <!--<property name="severity" value="warning"/>-->
            <property name="severity" value="ignore"/>
        </module>

        <!-- String的比较不能用!= 和 == -->
        <module name="StringLiteralEquality" />

        <!-- clone方法必须调用了super.clone() -->
        <module name="SuperClone" />

        <!-- finalize 必须调用了super.finalize() -->
        <module name="SuperFinalize" />

        <!-- Checks that switch statement has "default" clause. 检查switch语句是否有‘default’从句 !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="MissingSwitchDefault"/>

        <!-- Check for ensuring that for loop control variables are not modified inside the for block. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#ModifiedControlVariable !-->
        <!-- 循环控制变量不能被修改 -->
        <module name="ModifiedControlVariable"/>

        <!-- Disallow assignment of parameters. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <!-- 不许对方法的参数赋值 -->
        <!--<module name="ParameterAssignment"/>-->

        <!-- this got moved here from the import checks !-->

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport" />

        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport" />

        <!-- defaults to sun.* packages -->
        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport" />

        <!-- Checks for unused import statements. !-->
        <!-- See http://checkstyle.sf.net/config_import.html !-->
        <!--
            没用的import检查，比如：1.没有被用到2.重复的3.import java.lang的4.import
            与该类在同一个package的
        -->
        <module name="UnusedImports" />

    </module>


</module>
